#loc = loc(unknown)
module @jit_run_mlp {
  func.func public @main(%arg0: tensor<32x10xf32> {jax.arg_info = "batch", mhlo.sharding = "{replicated}"} loc(unknown)) -> (tensor<32x4xf32> {jax.result_info = ""}) {
    %0 = stablehlo.constant dense<0> : tensor<i32> loc(#loc)
    %1 = stablehlo.constant dense<32> : tensor<i32> loc(#loc7)
    %2 = stablehlo.shift_right_logical %0, %1 : tensor<i32> loc(#loc8)
    %3 = stablehlo.convert %2 : (tensor<i32>) -> tensor<ui32> loc(#loc9)
    %4 = stablehlo.reshape %3 : (tensor<ui32>) -> tensor<1xui32> loc(#loc10)
    %5 = stablehlo.constant dense<4294967295> : tensor<ui32> loc(#loc7)
    %6 = stablehlo.convert %5 : (tensor<ui32>) -> tensor<i32> loc(#loc11)
    %7 = stablehlo.and %0, %6 : tensor<i32> loc(#loc12)
    %8 = stablehlo.convert %7 : (tensor<i32>) -> tensor<ui32> loc(#loc9)
    %9 = stablehlo.reshape %8 : (tensor<ui32>) -> tensor<1xui32> loc(#loc10)
    %10 = stablehlo.concatenate %4, %9, dim = 0 : (tensor<1xui32>, tensor<1xui32>) -> tensor<2xui32> loc(#loc13)
    %11 = stablehlo.constant dense<2998342421> : tensor<ui32> loc(#loc)
    %12 = stablehlo.constant dense<32> : tensor<ui32> loc(#loc14)
    %13 = stablehlo.shift_right_logical %11, %12 : tensor<ui32> loc(#loc15)
    %14 = stablehlo.reshape %13 : (tensor<ui32>) -> tensor<1xui32> loc(#loc16)
    %15 = stablehlo.constant dense<4294967295> : tensor<ui32> loc(#loc14)
    %16 = stablehlo.and %11, %15 : tensor<ui32> loc(#loc17)
    %17 = stablehlo.reshape %16 : (tensor<ui32>) -> tensor<1xui32> loc(#loc16)
    %18 = stablehlo.concatenate %14, %17, dim = 0 : (tensor<1xui32>, tensor<1xui32>) -> tensor<2xui32> loc(#loc18)
    %19 = "stablehlo.slice"(%10) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xui32>) -> tensor<1xui32> loc(#loc19)
    %20 = stablehlo.reshape %19 : (tensor<1xui32>) -> tensor<ui32> loc(#loc20)
    %21 = "stablehlo.slice"(%10) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xui32>) -> tensor<1xui32> loc(#loc21)
    %22 = stablehlo.reshape %21 : (tensor<1xui32>) -> tensor<ui32> loc(#loc20)
    %23 = "stablehlo.slice"(%18) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xui32>) -> tensor<1xui32> loc(#loc22)
    %24 = "stablehlo.slice"(%18) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xui32>) -> tensor<1xui32> loc(#loc23)
    %25 = stablehlo.constant dense<[13, 15, 26, 6]> : tensor<4xui32> loc(#loc24)
    %26 = stablehlo.constant dense<[17, 29, 16, 24]> : tensor<4xui32> loc(#loc24)
    %27 = stablehlo.xor %20, %22 : tensor<ui32> loc(#loc25)
    %28 = stablehlo.constant dense<466688986> : tensor<ui32> loc(#loc24)
    %29 = stablehlo.xor %27, %28 : tensor<ui32> loc(#loc25)
    %30 = stablehlo.broadcast_in_dim %20, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc26)
    %31 = stablehlo.add %23, %30 : tensor<1xui32> loc(#loc26)
    %32 = stablehlo.broadcast_in_dim %22, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc26)
    %33 = stablehlo.add %24, %32 : tensor<1xui32> loc(#loc26)
    %34 = stablehlo.constant dense<0> : tensor<i32> loc(#loc24)
    %35 = stablehlo.constant dense<0> : tensor<i32> loc(#loc27)
    %36:9 = stablehlo.while(%iterArg = %35, %iterArg_0 = %34, %iterArg_1 = %31, %iterArg_2 = %33, %iterArg_3 = %22, %iterArg_4 = %29, %iterArg_5 = %20, %iterArg_6 = %25, %iterArg_7 = %26) : tensor<i32>, tensor<i32>, tensor<1xui32>, tensor<1xui32>, tensor<ui32>, tensor<ui32>, tensor<ui32>, tensor<4xui32>, tensor<4xui32>
     cond {
      %307 = stablehlo.constant dense<5> : tensor<i32> loc(#loc28)
      %308 = stablehlo.compare  LT, %iterArg, %307,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc29)
      stablehlo.return %308 : tensor<i1> loc(#loc28)
    } do {
      %307 = stablehlo.constant dense<1> : tensor<i32> loc(#loc28)
      %308 = stablehlo.add %iterArg_0, %307 : tensor<i32> loc(#loc30)
      %309 = "stablehlo.slice"(%iterArg_6) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xui32>) -> tensor<1xui32> loc(#loc31)
      %310 = stablehlo.reshape %309 : (tensor<1xui32>) -> tensor<ui32> loc(#loc32)
      %311 = stablehlo.add %iterArg_1, %iterArg_2 : tensor<1xui32> loc(#loc30)
      %312 = stablehlo.broadcast_in_dim %310, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc33)
      %313 = stablehlo.shift_left %iterArg_2, %312 : tensor<1xui32> loc(#loc33)
      %314 = stablehlo.constant dense<32> : tensor<ui32> loc(#loc28)
      %315 = stablehlo.subtract %314, %310 : tensor<ui32> loc(#loc34)
      %316 = stablehlo.broadcast_in_dim %315, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc35)
      %317 = stablehlo.shift_right_logical %iterArg_2, %316 : tensor<1xui32> loc(#loc35)
      %318 = stablehlo.or %313, %317 : tensor<1xui32> loc(#loc36)
      %319 = stablehlo.xor %311, %318 : tensor<1xui32> loc(#loc37)
      %320 = "stablehlo.slice"(%iterArg_6) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xui32>) -> tensor<1xui32> loc(#loc38)
      %321 = stablehlo.reshape %320 : (tensor<1xui32>) -> tensor<ui32> loc(#loc32)
      %322 = stablehlo.add %311, %319 : tensor<1xui32> loc(#loc30)
      %323 = stablehlo.broadcast_in_dim %321, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc33)
      %324 = stablehlo.shift_left %319, %323 : tensor<1xui32> loc(#loc33)
      %325 = stablehlo.constant dense<32> : tensor<ui32> loc(#loc28)
      %326 = stablehlo.subtract %325, %321 : tensor<ui32> loc(#loc34)
      %327 = stablehlo.broadcast_in_dim %326, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc35)
      %328 = stablehlo.shift_right_logical %319, %327 : tensor<1xui32> loc(#loc35)
      %329 = stablehlo.or %324, %328 : tensor<1xui32> loc(#loc36)
      %330 = stablehlo.xor %322, %329 : tensor<1xui32> loc(#loc37)
      %331 = "stablehlo.slice"(%iterArg_6) {limit_indices = dense<3> : tensor<1xi64>, start_indices = dense<2> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xui32>) -> tensor<1xui32> loc(#loc39)
      %332 = stablehlo.reshape %331 : (tensor<1xui32>) -> tensor<ui32> loc(#loc32)
      %333 = stablehlo.add %322, %330 : tensor<1xui32> loc(#loc30)
      %334 = stablehlo.broadcast_in_dim %332, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc33)
      %335 = stablehlo.shift_left %330, %334 : tensor<1xui32> loc(#loc33)
      %336 = stablehlo.constant dense<32> : tensor<ui32> loc(#loc28)
      %337 = stablehlo.subtract %336, %332 : tensor<ui32> loc(#loc34)
      %338 = stablehlo.broadcast_in_dim %337, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc35)
      %339 = stablehlo.shift_right_logical %330, %338 : tensor<1xui32> loc(#loc35)
      %340 = stablehlo.or %335, %339 : tensor<1xui32> loc(#loc36)
      %341 = stablehlo.xor %333, %340 : tensor<1xui32> loc(#loc37)
      %342 = "stablehlo.slice"(%iterArg_6) {limit_indices = dense<4> : tensor<1xi64>, start_indices = dense<3> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xui32>) -> tensor<1xui32> loc(#loc40)
      %343 = stablehlo.reshape %342 : (tensor<1xui32>) -> tensor<ui32> loc(#loc32)
      %344 = stablehlo.add %333, %341 : tensor<1xui32> loc(#loc30)
      %345 = stablehlo.broadcast_in_dim %343, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc33)
      %346 = stablehlo.shift_left %341, %345 : tensor<1xui32> loc(#loc33)
      %347 = stablehlo.constant dense<32> : tensor<ui32> loc(#loc28)
      %348 = stablehlo.subtract %347, %343 : tensor<ui32> loc(#loc34)
      %349 = stablehlo.broadcast_in_dim %348, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc35)
      %350 = stablehlo.shift_right_logical %341, %349 : tensor<1xui32> loc(#loc35)
      %351 = stablehlo.or %346, %350 : tensor<1xui32> loc(#loc36)
      %352 = stablehlo.xor %344, %351 : tensor<1xui32> loc(#loc37)
      %353 = stablehlo.broadcast_in_dim %iterArg_3, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc30)
      %354 = stablehlo.add %344, %353 : tensor<1xui32> loc(#loc30)
      %355 = stablehlo.broadcast_in_dim %iterArg_4, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc30)
      %356 = stablehlo.add %352, %355 : tensor<1xui32> loc(#loc30)
      %357 = stablehlo.constant dense<1> : tensor<i32> loc(#loc28)
      %358 = stablehlo.add %iterArg_0, %357 : tensor<i32> loc(#loc30)
      %359 = stablehlo.convert %358 : (tensor<i32>) -> tensor<ui32> loc(#loc41)
      %360 = stablehlo.broadcast_in_dim %359, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc30)
      %361 = stablehlo.add %356, %360 : tensor<1xui32> loc(#loc30)
      %362 = stablehlo.constant dense<1> : tensor<i32> loc(#loc28)
      %363 = stablehlo.add %iterArg, %362 : tensor<i32> loc(#loc30)
      stablehlo.return %363, %308, %354, %361, %iterArg_4, %iterArg_5, %iterArg_3, %iterArg_7, %iterArg_6 : tensor<i32>, tensor<i32>, tensor<1xui32>, tensor<1xui32>, tensor<ui32>, tensor<ui32>, tensor<ui32>, tensor<4xui32>, tensor<4xui32> loc(#loc28)
    } loc(#loc28)
    %37 = stablehlo.concatenate %36#2, %36#3, dim = 0 : (tensor<1xui32>, tensor<1xui32>) -> tensor<2xui32> loc(#loc18)
    %38 = stablehlo.constant dense<1.000000e-01> : tensor<f32> loc(#loc)
    %39 = stablehlo.sqrt %38 : tensor<f32> loc(#loc42)
    %40 = stablehlo.constant dense<0.879625678> : tensor<f32> loc(#loc)
    %41 = stablehlo.divide %39, %40 : tensor<f32> loc(#loc43)
    %42 = stablehlo.constant dense<-2.000000e+00> : tensor<f32> loc(#loc)
    %43 = stablehlo.constant dense<1.41421354> : tensor<f32> loc(#loc)
    %44 = stablehlo.divide %42, %43 : tensor<f32> loc(#loc43)
    %45 = chlo.erf %44 : tensor<f32> -> tensor<f32> loc(#loc44)
    %46 = stablehlo.constant dense<2.000000e+00> : tensor<f32> loc(#loc)
    %47 = stablehlo.constant dense<1.41421354> : tensor<f32> loc(#loc)
    %48 = stablehlo.divide %46, %47 : tensor<f32> loc(#loc43)
    %49 = chlo.erf %48 : tensor<f32> -> tensor<f32> loc(#loc44)
    %50 = stablehlo.broadcast_in_dim %45, dims = [] : (tensor<f32>) -> tensor<1x1xf32> loc(#loc45)
    %51 = stablehlo.broadcast_in_dim %49, dims = [] : (tensor<f32>) -> tensor<1x1xf32> loc(#loc45)
    %52 = stablehlo.iota dim = 0 : tensor<120xui32> loc(#loc46)
    %53 = "stablehlo.slice"(%37) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xui32>) -> tensor<1xui32> loc(#loc47)
    %54 = stablehlo.reshape %53 : (tensor<1xui32>) -> tensor<ui32> loc(#loc48)
    %55 = "stablehlo.slice"(%37) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xui32>) -> tensor<1xui32> loc(#loc49)
    %56 = stablehlo.reshape %55 : (tensor<1xui32>) -> tensor<ui32> loc(#loc48)
    %57 = "stablehlo.slice"(%52) {limit_indices = dense<60> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<120xui32>) -> tensor<60xui32> loc(#loc50)
    %58 = "stablehlo.slice"(%52) {limit_indices = dense<120> : tensor<1xi64>, start_indices = dense<60> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<120xui32>) -> tensor<60xui32> loc(#loc51)
    %59 = stablehlo.constant dense<[13, 15, 26, 6]> : tensor<4xui32> loc(#loc52)
    %60 = stablehlo.constant dense<[17, 29, 16, 24]> : tensor<4xui32> loc(#loc52)
    %61 = stablehlo.xor %54, %56 : tensor<ui32> loc(#loc25)
    %62 = stablehlo.constant dense<466688986> : tensor<ui32> loc(#loc52)
    %63 = stablehlo.xor %61, %62 : tensor<ui32> loc(#loc25)
    %64 = stablehlo.broadcast_in_dim %54, dims = [] : (tensor<ui32>) -> tensor<60xui32> loc(#loc53)
    %65 = stablehlo.add %57, %64 : tensor<60xui32> loc(#loc53)
    %66 = stablehlo.broadcast_in_dim %56, dims = [] : (tensor<ui32>) -> tensor<60xui32> loc(#loc53)
    %67 = stablehlo.add %58, %66 : tensor<60xui32> loc(#loc53)
    %68 = stablehlo.constant dense<0> : tensor<i32> loc(#loc52)
    %69 = stablehlo.constant dense<0> : tensor<i32> loc(#loc54)
    %70:9 = stablehlo.while(%iterArg = %69, %iterArg_0 = %68, %iterArg_1 = %65, %iterArg_2 = %67, %iterArg_3 = %56, %iterArg_4 = %63, %iterArg_5 = %54, %iterArg_6 = %59, %iterArg_7 = %60) : tensor<i32>, tensor<i32>, tensor<60xui32>, tensor<60xui32>, tensor<ui32>, tensor<ui32>, tensor<ui32>, tensor<4xui32>, tensor<4xui32>
     cond {
      %307 = stablehlo.constant dense<5> : tensor<i32> loc(#loc55)
      %308 = stablehlo.compare  LT, %iterArg, %307,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc29)
      stablehlo.return %308 : tensor<i1> loc(#loc55)
    } do {
      %307 = stablehlo.constant dense<1> : tensor<i32> loc(#loc55)
      %308 = stablehlo.add %iterArg_0, %307 : tensor<i32> loc(#loc30)
      %309 = "stablehlo.slice"(%iterArg_6) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xui32>) -> tensor<1xui32> loc(#loc56)
      %310 = stablehlo.reshape %309 : (tensor<1xui32>) -> tensor<ui32> loc(#loc57)
      %311 = stablehlo.add %iterArg_1, %iterArg_2 : tensor<60xui32> loc(#loc58)
      %312 = stablehlo.broadcast_in_dim %310, dims = [] : (tensor<ui32>) -> tensor<60xui32> loc(#loc59)
      %313 = stablehlo.shift_left %iterArg_2, %312 : tensor<60xui32> loc(#loc59)
      %314 = stablehlo.constant dense<32> : tensor<ui32> loc(#loc55)
      %315 = stablehlo.subtract %314, %310 : tensor<ui32> loc(#loc34)
      %316 = stablehlo.broadcast_in_dim %315, dims = [] : (tensor<ui32>) -> tensor<60xui32> loc(#loc60)
      %317 = stablehlo.shift_right_logical %iterArg_2, %316 : tensor<60xui32> loc(#loc60)
      %318 = stablehlo.or %313, %317 : tensor<60xui32> loc(#loc61)
      %319 = stablehlo.xor %311, %318 : tensor<60xui32> loc(#loc62)
      %320 = "stablehlo.slice"(%iterArg_6) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xui32>) -> tensor<1xui32> loc(#loc63)
      %321 = stablehlo.reshape %320 : (tensor<1xui32>) -> tensor<ui32> loc(#loc57)
      %322 = stablehlo.add %311, %319 : tensor<60xui32> loc(#loc58)
      %323 = stablehlo.broadcast_in_dim %321, dims = [] : (tensor<ui32>) -> tensor<60xui32> loc(#loc59)
      %324 = stablehlo.shift_left %319, %323 : tensor<60xui32> loc(#loc59)
      %325 = stablehlo.constant dense<32> : tensor<ui32> loc(#loc55)
      %326 = stablehlo.subtract %325, %321 : tensor<ui32> loc(#loc34)
      %327 = stablehlo.broadcast_in_dim %326, dims = [] : (tensor<ui32>) -> tensor<60xui32> loc(#loc60)
      %328 = stablehlo.shift_right_logical %319, %327 : tensor<60xui32> loc(#loc60)
      %329 = stablehlo.or %324, %328 : tensor<60xui32> loc(#loc61)
      %330 = stablehlo.xor %322, %329 : tensor<60xui32> loc(#loc62)
      %331 = "stablehlo.slice"(%iterArg_6) {limit_indices = dense<3> : tensor<1xi64>, start_indices = dense<2> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xui32>) -> tensor<1xui32> loc(#loc64)
      %332 = stablehlo.reshape %331 : (tensor<1xui32>) -> tensor<ui32> loc(#loc57)
      %333 = stablehlo.add %322, %330 : tensor<60xui32> loc(#loc58)
      %334 = stablehlo.broadcast_in_dim %332, dims = [] : (tensor<ui32>) -> tensor<60xui32> loc(#loc59)
      %335 = stablehlo.shift_left %330, %334 : tensor<60xui32> loc(#loc59)
      %336 = stablehlo.constant dense<32> : tensor<ui32> loc(#loc55)
      %337 = stablehlo.subtract %336, %332 : tensor<ui32> loc(#loc34)
      %338 = stablehlo.broadcast_in_dim %337, dims = [] : (tensor<ui32>) -> tensor<60xui32> loc(#loc60)
      %339 = stablehlo.shift_right_logical %330, %338 : tensor<60xui32> loc(#loc60)
      %340 = stablehlo.or %335, %339 : tensor<60xui32> loc(#loc61)
      %341 = stablehlo.xor %333, %340 : tensor<60xui32> loc(#loc62)
      %342 = "stablehlo.slice"(%iterArg_6) {limit_indices = dense<4> : tensor<1xi64>, start_indices = dense<3> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xui32>) -> tensor<1xui32> loc(#loc65)
      %343 = stablehlo.reshape %342 : (tensor<1xui32>) -> tensor<ui32> loc(#loc57)
      %344 = stablehlo.add %333, %341 : tensor<60xui32> loc(#loc58)
      %345 = stablehlo.broadcast_in_dim %343, dims = [] : (tensor<ui32>) -> tensor<60xui32> loc(#loc59)
      %346 = stablehlo.shift_left %341, %345 : tensor<60xui32> loc(#loc59)
      %347 = stablehlo.constant dense<32> : tensor<ui32> loc(#loc55)
      %348 = stablehlo.subtract %347, %343 : tensor<ui32> loc(#loc34)
      %349 = stablehlo.broadcast_in_dim %348, dims = [] : (tensor<ui32>) -> tensor<60xui32> loc(#loc60)
      %350 = stablehlo.shift_right_logical %341, %349 : tensor<60xui32> loc(#loc60)
      %351 = stablehlo.or %346, %350 : tensor<60xui32> loc(#loc61)
      %352 = stablehlo.xor %344, %351 : tensor<60xui32> loc(#loc62)
      %353 = stablehlo.broadcast_in_dim %iterArg_3, dims = [] : (tensor<ui32>) -> tensor<60xui32> loc(#loc58)
      %354 = stablehlo.add %344, %353 : tensor<60xui32> loc(#loc58)
      %355 = stablehlo.broadcast_in_dim %iterArg_4, dims = [] : (tensor<ui32>) -> tensor<60xui32> loc(#loc58)
      %356 = stablehlo.add %352, %355 : tensor<60xui32> loc(#loc58)
      %357 = stablehlo.constant dense<1> : tensor<i32> loc(#loc55)
      %358 = stablehlo.add %iterArg_0, %357 : tensor<i32> loc(#loc30)
      %359 = stablehlo.convert %358 : (tensor<i32>) -> tensor<ui32> loc(#loc66)
      %360 = stablehlo.broadcast_in_dim %359, dims = [] : (tensor<ui32>) -> tensor<60xui32> loc(#loc58)
      %361 = stablehlo.add %356, %360 : tensor<60xui32> loc(#loc58)
      %362 = stablehlo.constant dense<1> : tensor<i32> loc(#loc55)
      %363 = stablehlo.add %iterArg, %362 : tensor<i32> loc(#loc30)
      stablehlo.return %363, %308, %354, %361, %iterArg_4, %iterArg_5, %iterArg_3, %iterArg_7, %iterArg_6 : tensor<i32>, tensor<i32>, tensor<60xui32>, tensor<60xui32>, tensor<ui32>, tensor<ui32>, tensor<ui32>, tensor<4xui32>, tensor<4xui32> loc(#loc55)
    } loc(#loc55)
    %71 = stablehlo.concatenate %70#2, %70#3, dim = 0 : (tensor<60xui32>, tensor<60xui32>) -> tensor<120xui32> loc(#loc67)
    %72 = stablehlo.reshape %71 : (tensor<120xui32>) -> tensor<10x12xui32> loc(#loc68)
    %73 = stablehlo.constant dense<9> : tensor<ui32> loc(#loc)
    %74 = stablehlo.broadcast_in_dim %73, dims = [] : (tensor<ui32>) -> tensor<10x12xui32> loc(#loc69)
    %75 = stablehlo.shift_right_logical %72, %74 : tensor<10x12xui32> loc(#loc69)
    %76 = stablehlo.constant dense<1065353216> : tensor<ui32> loc(#loc)
    %77 = stablehlo.broadcast_in_dim %76, dims = [] : (tensor<ui32>) -> tensor<10x12xui32> loc(#loc70)
    %78 = stablehlo.or %75, %77 : tensor<10x12xui32> loc(#loc70)
    %79 = stablehlo.bitcast_convert %78 : (tensor<10x12xui32>) -> tensor<10x12xf32> loc(#loc71)
    %80 = stablehlo.constant dense<1.000000e+00> : tensor<f32> loc(#loc)
    %81 = stablehlo.broadcast_in_dim %80, dims = [] : (tensor<f32>) -> tensor<10x12xf32> loc(#loc72)
    %82 = stablehlo.subtract %79, %81 : tensor<10x12xf32> loc(#loc72)
    %83 = stablehlo.subtract %51, %50 : tensor<1x1xf32> loc(#loc72)
    %84 = stablehlo.broadcast_in_dim %83, dims = [0, 1] : (tensor<1x1xf32>) -> tensor<10x12xf32> loc(#loc73)
    %85 = stablehlo.multiply %82, %84 : tensor<10x12xf32> loc(#loc73)
    %86 = stablehlo.broadcast_in_dim %50, dims = [0, 1] : (tensor<1x1xf32>) -> tensor<10x12xf32> loc(#loc53)
    %87 = stablehlo.add %85, %86 : tensor<10x12xf32> loc(#loc53)
    %88 = stablehlo.broadcast_in_dim %50, dims = [0, 1] : (tensor<1x1xf32>) -> tensor<10x12xf32> loc(#loc74)
    %89 = stablehlo.maximum %88, %87 : tensor<10x12xf32> loc(#loc74)
    %90 = chlo.erf_inv %89 : tensor<10x12xf32> -> tensor<10x12xf32> loc(#loc75)
    %91 = stablehlo.constant dense<1.41421354> : tensor<f32> loc(#loc)
    %92 = stablehlo.broadcast_in_dim %91, dims = [] : (tensor<f32>) -> tensor<10x12xf32> loc(#loc73)
    %93 = stablehlo.multiply %92, %90 : tensor<10x12xf32> loc(#loc73)
    %94 = stablehlo.constant dense<-2.000000e+00> : tensor<f32> loc(#loc)
    %95 = stablehlo.constant dense<0x7F800000> : tensor<f32> loc(#loc)
    %96 = chlo.next_after %94, %95 : tensor<f32>, tensor<f32> -> tensor<f32> loc(#loc76)
    %97 = stablehlo.constant dense<2.000000e+00> : tensor<f32> loc(#loc)
    %98 = stablehlo.constant dense<0xFF800000> : tensor<f32> loc(#loc)
    %99 = chlo.next_after %97, %98 : tensor<f32>, tensor<f32> -> tensor<f32> loc(#loc76)
    %100 = call @clip(%93, %96, %99) : (tensor<10x12xf32>, tensor<f32>, tensor<f32>) -> tensor<10x12xf32> loc(#loc77)
    %101 = stablehlo.broadcast_in_dim %41, dims = [] : (tensor<f32>) -> tensor<10x12xf32> loc(#loc73)
    %102 = stablehlo.multiply %100, %101 : tensor<10x12xf32> loc(#loc73)
    %103 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc)
    %104 = stablehlo.broadcast_in_dim %103, dims = [] : (tensor<f32>) -> tensor<12xf32> loc(#loc78)
    %105 = stablehlo.constant dense<111800540> : tensor<ui32> loc(#loc)
    %106 = stablehlo.constant dense<32> : tensor<ui32> loc(#loc79)
    %107 = stablehlo.shift_right_logical %105, %106 : tensor<ui32> loc(#loc80)
    %108 = stablehlo.reshape %107 : (tensor<ui32>) -> tensor<1xui32> loc(#loc81)
    %109 = stablehlo.constant dense<4294967295> : tensor<ui32> loc(#loc79)
    %110 = stablehlo.and %105, %109 : tensor<ui32> loc(#loc82)
    %111 = stablehlo.reshape %110 : (tensor<ui32>) -> tensor<1xui32> loc(#loc81)
    %112 = stablehlo.concatenate %108, %111, dim = 0 : (tensor<1xui32>, tensor<1xui32>) -> tensor<2xui32> loc(#loc83)
    %113 = "stablehlo.slice"(%10) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xui32>) -> tensor<1xui32> loc(#loc84)
    %114 = stablehlo.reshape %113 : (tensor<1xui32>) -> tensor<ui32> loc(#loc85)
    %115 = "stablehlo.slice"(%10) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xui32>) -> tensor<1xui32> loc(#loc86)
    %116 = stablehlo.reshape %115 : (tensor<1xui32>) -> tensor<ui32> loc(#loc85)
    %117 = "stablehlo.slice"(%112) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xui32>) -> tensor<1xui32> loc(#loc87)
    %118 = "stablehlo.slice"(%112) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xui32>) -> tensor<1xui32> loc(#loc88)
    %119 = stablehlo.constant dense<[13, 15, 26, 6]> : tensor<4xui32> loc(#loc89)
    %120 = stablehlo.constant dense<[17, 29, 16, 24]> : tensor<4xui32> loc(#loc89)
    %121 = stablehlo.xor %114, %116 : tensor<ui32> loc(#loc90)
    %122 = stablehlo.constant dense<466688986> : tensor<ui32> loc(#loc89)
    %123 = stablehlo.xor %121, %122 : tensor<ui32> loc(#loc90)
    %124 = stablehlo.broadcast_in_dim %114, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc91)
    %125 = stablehlo.add %117, %124 : tensor<1xui32> loc(#loc91)
    %126 = stablehlo.broadcast_in_dim %116, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc91)
    %127 = stablehlo.add %118, %126 : tensor<1xui32> loc(#loc91)
    %128 = stablehlo.constant dense<0> : tensor<i32> loc(#loc89)
    %129 = stablehlo.constant dense<0> : tensor<i32> loc(#loc92)
    %130:9 = stablehlo.while(%iterArg = %129, %iterArg_0 = %128, %iterArg_1 = %125, %iterArg_2 = %127, %iterArg_3 = %116, %iterArg_4 = %123, %iterArg_5 = %114, %iterArg_6 = %119, %iterArg_7 = %120) : tensor<i32>, tensor<i32>, tensor<1xui32>, tensor<1xui32>, tensor<ui32>, tensor<ui32>, tensor<ui32>, tensor<4xui32>, tensor<4xui32>
     cond {
      %307 = stablehlo.constant dense<5> : tensor<i32> loc(#loc93)
      %308 = stablehlo.compare  LT, %iterArg, %307,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc94)
      stablehlo.return %308 : tensor<i1> loc(#loc93)
    } do {
      %307 = stablehlo.constant dense<1> : tensor<i32> loc(#loc93)
      %308 = stablehlo.add %iterArg_0, %307 : tensor<i32> loc(#loc95)
      %309 = "stablehlo.slice"(%iterArg_6) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xui32>) -> tensor<1xui32> loc(#loc96)
      %310 = stablehlo.reshape %309 : (tensor<1xui32>) -> tensor<ui32> loc(#loc97)
      %311 = stablehlo.add %iterArg_1, %iterArg_2 : tensor<1xui32> loc(#loc95)
      %312 = stablehlo.broadcast_in_dim %310, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc98)
      %313 = stablehlo.shift_left %iterArg_2, %312 : tensor<1xui32> loc(#loc98)
      %314 = stablehlo.constant dense<32> : tensor<ui32> loc(#loc93)
      %315 = stablehlo.subtract %314, %310 : tensor<ui32> loc(#loc99)
      %316 = stablehlo.broadcast_in_dim %315, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc100)
      %317 = stablehlo.shift_right_logical %iterArg_2, %316 : tensor<1xui32> loc(#loc100)
      %318 = stablehlo.or %313, %317 : tensor<1xui32> loc(#loc101)
      %319 = stablehlo.xor %311, %318 : tensor<1xui32> loc(#loc102)
      %320 = "stablehlo.slice"(%iterArg_6) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xui32>) -> tensor<1xui32> loc(#loc103)
      %321 = stablehlo.reshape %320 : (tensor<1xui32>) -> tensor<ui32> loc(#loc97)
      %322 = stablehlo.add %311, %319 : tensor<1xui32> loc(#loc95)
      %323 = stablehlo.broadcast_in_dim %321, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc98)
      %324 = stablehlo.shift_left %319, %323 : tensor<1xui32> loc(#loc98)
      %325 = stablehlo.constant dense<32> : tensor<ui32> loc(#loc93)
      %326 = stablehlo.subtract %325, %321 : tensor<ui32> loc(#loc99)
      %327 = stablehlo.broadcast_in_dim %326, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc100)
      %328 = stablehlo.shift_right_logical %319, %327 : tensor<1xui32> loc(#loc100)
      %329 = stablehlo.or %324, %328 : tensor<1xui32> loc(#loc101)
      %330 = stablehlo.xor %322, %329 : tensor<1xui32> loc(#loc102)
      %331 = "stablehlo.slice"(%iterArg_6) {limit_indices = dense<3> : tensor<1xi64>, start_indices = dense<2> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xui32>) -> tensor<1xui32> loc(#loc104)
      %332 = stablehlo.reshape %331 : (tensor<1xui32>) -> tensor<ui32> loc(#loc97)
      %333 = stablehlo.add %322, %330 : tensor<1xui32> loc(#loc95)
      %334 = stablehlo.broadcast_in_dim %332, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc98)
      %335 = stablehlo.shift_left %330, %334 : tensor<1xui32> loc(#loc98)
      %336 = stablehlo.constant dense<32> : tensor<ui32> loc(#loc93)
      %337 = stablehlo.subtract %336, %332 : tensor<ui32> loc(#loc99)
      %338 = stablehlo.broadcast_in_dim %337, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc100)
      %339 = stablehlo.shift_right_logical %330, %338 : tensor<1xui32> loc(#loc100)
      %340 = stablehlo.or %335, %339 : tensor<1xui32> loc(#loc101)
      %341 = stablehlo.xor %333, %340 : tensor<1xui32> loc(#loc102)
      %342 = "stablehlo.slice"(%iterArg_6) {limit_indices = dense<4> : tensor<1xi64>, start_indices = dense<3> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xui32>) -> tensor<1xui32> loc(#loc105)
      %343 = stablehlo.reshape %342 : (tensor<1xui32>) -> tensor<ui32> loc(#loc97)
      %344 = stablehlo.add %333, %341 : tensor<1xui32> loc(#loc95)
      %345 = stablehlo.broadcast_in_dim %343, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc98)
      %346 = stablehlo.shift_left %341, %345 : tensor<1xui32> loc(#loc98)
      %347 = stablehlo.constant dense<32> : tensor<ui32> loc(#loc93)
      %348 = stablehlo.subtract %347, %343 : tensor<ui32> loc(#loc99)
      %349 = stablehlo.broadcast_in_dim %348, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc100)
      %350 = stablehlo.shift_right_logical %341, %349 : tensor<1xui32> loc(#loc100)
      %351 = stablehlo.or %346, %350 : tensor<1xui32> loc(#loc101)
      %352 = stablehlo.xor %344, %351 : tensor<1xui32> loc(#loc102)
      %353 = stablehlo.broadcast_in_dim %iterArg_3, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc95)
      %354 = stablehlo.add %344, %353 : tensor<1xui32> loc(#loc95)
      %355 = stablehlo.broadcast_in_dim %iterArg_4, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc95)
      %356 = stablehlo.add %352, %355 : tensor<1xui32> loc(#loc95)
      %357 = stablehlo.constant dense<1> : tensor<i32> loc(#loc93)
      %358 = stablehlo.add %iterArg_0, %357 : tensor<i32> loc(#loc95)
      %359 = stablehlo.convert %358 : (tensor<i32>) -> tensor<ui32> loc(#loc106)
      %360 = stablehlo.broadcast_in_dim %359, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc95)
      %361 = stablehlo.add %356, %360 : tensor<1xui32> loc(#loc95)
      %362 = stablehlo.constant dense<1> : tensor<i32> loc(#loc93)
      %363 = stablehlo.add %iterArg, %362 : tensor<i32> loc(#loc95)
      stablehlo.return %363, %308, %354, %361, %iterArg_4, %iterArg_5, %iterArg_3, %iterArg_7, %iterArg_6 : tensor<i32>, tensor<i32>, tensor<1xui32>, tensor<1xui32>, tensor<ui32>, tensor<ui32>, tensor<ui32>, tensor<4xui32>, tensor<4xui32> loc(#loc93)
    } loc(#loc93)
    %131 = stablehlo.concatenate %130#2, %130#3, dim = 0 : (tensor<1xui32>, tensor<1xui32>) -> tensor<2xui32> loc(#loc83)
    %132 = stablehlo.constant dense<0.0833333358> : tensor<f32> loc(#loc)
    %133 = stablehlo.sqrt %132 : tensor<f32> loc(#loc107)
    %134 = stablehlo.constant dense<0.879625678> : tensor<f32> loc(#loc)
    %135 = stablehlo.divide %133, %134 : tensor<f32> loc(#loc108)
    %136 = stablehlo.constant dense<-2.000000e+00> : tensor<f32> loc(#loc)
    %137 = stablehlo.constant dense<1.41421354> : tensor<f32> loc(#loc)
    %138 = stablehlo.divide %136, %137 : tensor<f32> loc(#loc108)
    %139 = chlo.erf %138 : tensor<f32> -> tensor<f32> loc(#loc109)
    %140 = stablehlo.constant dense<2.000000e+00> : tensor<f32> loc(#loc)
    %141 = stablehlo.constant dense<1.41421354> : tensor<f32> loc(#loc)
    %142 = stablehlo.divide %140, %141 : tensor<f32> loc(#loc108)
    %143 = chlo.erf %142 : tensor<f32> -> tensor<f32> loc(#loc109)
    %144 = stablehlo.broadcast_in_dim %139, dims = [] : (tensor<f32>) -> tensor<1x1xf32> loc(#loc110)
    %145 = stablehlo.broadcast_in_dim %143, dims = [] : (tensor<f32>) -> tensor<1x1xf32> loc(#loc110)
    %146 = stablehlo.iota dim = 0 : tensor<96xui32> loc(#loc111)
    %147 = "stablehlo.slice"(%131) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xui32>) -> tensor<1xui32> loc(#loc112)
    %148 = stablehlo.reshape %147 : (tensor<1xui32>) -> tensor<ui32> loc(#loc113)
    %149 = "stablehlo.slice"(%131) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xui32>) -> tensor<1xui32> loc(#loc114)
    %150 = stablehlo.reshape %149 : (tensor<1xui32>) -> tensor<ui32> loc(#loc113)
    %151 = "stablehlo.slice"(%146) {limit_indices = dense<48> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<96xui32>) -> tensor<48xui32> loc(#loc115)
    %152 = "stablehlo.slice"(%146) {limit_indices = dense<96> : tensor<1xi64>, start_indices = dense<48> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<96xui32>) -> tensor<48xui32> loc(#loc116)
    %153 = stablehlo.constant dense<[13, 15, 26, 6]> : tensor<4xui32> loc(#loc117)
    %154 = stablehlo.constant dense<[17, 29, 16, 24]> : tensor<4xui32> loc(#loc117)
    %155 = stablehlo.xor %148, %150 : tensor<ui32> loc(#loc90)
    %156 = stablehlo.constant dense<466688986> : tensor<ui32> loc(#loc117)
    %157 = stablehlo.xor %155, %156 : tensor<ui32> loc(#loc90)
    %158 = stablehlo.broadcast_in_dim %148, dims = [] : (tensor<ui32>) -> tensor<48xui32> loc(#loc118)
    %159 = stablehlo.add %151, %158 : tensor<48xui32> loc(#loc118)
    %160 = stablehlo.broadcast_in_dim %150, dims = [] : (tensor<ui32>) -> tensor<48xui32> loc(#loc118)
    %161 = stablehlo.add %152, %160 : tensor<48xui32> loc(#loc118)
    %162 = stablehlo.constant dense<0> : tensor<i32> loc(#loc117)
    %163 = stablehlo.constant dense<0> : tensor<i32> loc(#loc119)
    %164:9 = stablehlo.while(%iterArg = %163, %iterArg_0 = %162, %iterArg_1 = %159, %iterArg_2 = %161, %iterArg_3 = %150, %iterArg_4 = %157, %iterArg_5 = %148, %iterArg_6 = %153, %iterArg_7 = %154) : tensor<i32>, tensor<i32>, tensor<48xui32>, tensor<48xui32>, tensor<ui32>, tensor<ui32>, tensor<ui32>, tensor<4xui32>, tensor<4xui32>
     cond {
      %307 = stablehlo.constant dense<5> : tensor<i32> loc(#loc120)
      %308 = stablehlo.compare  LT, %iterArg, %307,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc94)
      stablehlo.return %308 : tensor<i1> loc(#loc120)
    } do {
      %307 = stablehlo.constant dense<1> : tensor<i32> loc(#loc120)
      %308 = stablehlo.add %iterArg_0, %307 : tensor<i32> loc(#loc95)
      %309 = "stablehlo.slice"(%iterArg_6) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xui32>) -> tensor<1xui32> loc(#loc121)
      %310 = stablehlo.reshape %309 : (tensor<1xui32>) -> tensor<ui32> loc(#loc122)
      %311 = stablehlo.add %iterArg_1, %iterArg_2 : tensor<48xui32> loc(#loc123)
      %312 = stablehlo.broadcast_in_dim %310, dims = [] : (tensor<ui32>) -> tensor<48xui32> loc(#loc124)
      %313 = stablehlo.shift_left %iterArg_2, %312 : tensor<48xui32> loc(#loc124)
      %314 = stablehlo.constant dense<32> : tensor<ui32> loc(#loc120)
      %315 = stablehlo.subtract %314, %310 : tensor<ui32> loc(#loc99)
      %316 = stablehlo.broadcast_in_dim %315, dims = [] : (tensor<ui32>) -> tensor<48xui32> loc(#loc125)
      %317 = stablehlo.shift_right_logical %iterArg_2, %316 : tensor<48xui32> loc(#loc125)
      %318 = stablehlo.or %313, %317 : tensor<48xui32> loc(#loc126)
      %319 = stablehlo.xor %311, %318 : tensor<48xui32> loc(#loc127)
      %320 = "stablehlo.slice"(%iterArg_6) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xui32>) -> tensor<1xui32> loc(#loc128)
      %321 = stablehlo.reshape %320 : (tensor<1xui32>) -> tensor<ui32> loc(#loc122)
      %322 = stablehlo.add %311, %319 : tensor<48xui32> loc(#loc123)
      %323 = stablehlo.broadcast_in_dim %321, dims = [] : (tensor<ui32>) -> tensor<48xui32> loc(#loc124)
      %324 = stablehlo.shift_left %319, %323 : tensor<48xui32> loc(#loc124)
      %325 = stablehlo.constant dense<32> : tensor<ui32> loc(#loc120)
      %326 = stablehlo.subtract %325, %321 : tensor<ui32> loc(#loc99)
      %327 = stablehlo.broadcast_in_dim %326, dims = [] : (tensor<ui32>) -> tensor<48xui32> loc(#loc125)
      %328 = stablehlo.shift_right_logical %319, %327 : tensor<48xui32> loc(#loc125)
      %329 = stablehlo.or %324, %328 : tensor<48xui32> loc(#loc126)
      %330 = stablehlo.xor %322, %329 : tensor<48xui32> loc(#loc127)
      %331 = "stablehlo.slice"(%iterArg_6) {limit_indices = dense<3> : tensor<1xi64>, start_indices = dense<2> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xui32>) -> tensor<1xui32> loc(#loc129)
      %332 = stablehlo.reshape %331 : (tensor<1xui32>) -> tensor<ui32> loc(#loc122)
      %333 = stablehlo.add %322, %330 : tensor<48xui32> loc(#loc123)
      %334 = stablehlo.broadcast_in_dim %332, dims = [] : (tensor<ui32>) -> tensor<48xui32> loc(#loc124)
      %335 = stablehlo.shift_left %330, %334 : tensor<48xui32> loc(#loc124)
      %336 = stablehlo.constant dense<32> : tensor<ui32> loc(#loc120)
      %337 = stablehlo.subtract %336, %332 : tensor<ui32> loc(#loc99)
      %338 = stablehlo.broadcast_in_dim %337, dims = [] : (tensor<ui32>) -> tensor<48xui32> loc(#loc125)
      %339 = stablehlo.shift_right_logical %330, %338 : tensor<48xui32> loc(#loc125)
      %340 = stablehlo.or %335, %339 : tensor<48xui32> loc(#loc126)
      %341 = stablehlo.xor %333, %340 : tensor<48xui32> loc(#loc127)
      %342 = "stablehlo.slice"(%iterArg_6) {limit_indices = dense<4> : tensor<1xi64>, start_indices = dense<3> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xui32>) -> tensor<1xui32> loc(#loc130)
      %343 = stablehlo.reshape %342 : (tensor<1xui32>) -> tensor<ui32> loc(#loc122)
      %344 = stablehlo.add %333, %341 : tensor<48xui32> loc(#loc123)
      %345 = stablehlo.broadcast_in_dim %343, dims = [] : (tensor<ui32>) -> tensor<48xui32> loc(#loc124)
      %346 = stablehlo.shift_left %341, %345 : tensor<48xui32> loc(#loc124)
      %347 = stablehlo.constant dense<32> : tensor<ui32> loc(#loc120)
      %348 = stablehlo.subtract %347, %343 : tensor<ui32> loc(#loc99)
      %349 = stablehlo.broadcast_in_dim %348, dims = [] : (tensor<ui32>) -> tensor<48xui32> loc(#loc125)
      %350 = stablehlo.shift_right_logical %341, %349 : tensor<48xui32> loc(#loc125)
      %351 = stablehlo.or %346, %350 : tensor<48xui32> loc(#loc126)
      %352 = stablehlo.xor %344, %351 : tensor<48xui32> loc(#loc127)
      %353 = stablehlo.broadcast_in_dim %iterArg_3, dims = [] : (tensor<ui32>) -> tensor<48xui32> loc(#loc123)
      %354 = stablehlo.add %344, %353 : tensor<48xui32> loc(#loc123)
      %355 = stablehlo.broadcast_in_dim %iterArg_4, dims = [] : (tensor<ui32>) -> tensor<48xui32> loc(#loc123)
      %356 = stablehlo.add %352, %355 : tensor<48xui32> loc(#loc123)
      %357 = stablehlo.constant dense<1> : tensor<i32> loc(#loc120)
      %358 = stablehlo.add %iterArg_0, %357 : tensor<i32> loc(#loc95)
      %359 = stablehlo.convert %358 : (tensor<i32>) -> tensor<ui32> loc(#loc131)
      %360 = stablehlo.broadcast_in_dim %359, dims = [] : (tensor<ui32>) -> tensor<48xui32> loc(#loc123)
      %361 = stablehlo.add %356, %360 : tensor<48xui32> loc(#loc123)
      %362 = stablehlo.constant dense<1> : tensor<i32> loc(#loc120)
      %363 = stablehlo.add %iterArg, %362 : tensor<i32> loc(#loc95)
      stablehlo.return %363, %308, %354, %361, %iterArg_4, %iterArg_5, %iterArg_3, %iterArg_7, %iterArg_6 : tensor<i32>, tensor<i32>, tensor<48xui32>, tensor<48xui32>, tensor<ui32>, tensor<ui32>, tensor<ui32>, tensor<4xui32>, tensor<4xui32> loc(#loc120)
    } loc(#loc120)
    %165 = stablehlo.concatenate %164#2, %164#3, dim = 0 : (tensor<48xui32>, tensor<48xui32>) -> tensor<96xui32> loc(#loc132)
    %166 = stablehlo.reshape %165 : (tensor<96xui32>) -> tensor<12x8xui32> loc(#loc133)
    %167 = stablehlo.constant dense<9> : tensor<ui32> loc(#loc)
    %168 = stablehlo.broadcast_in_dim %167, dims = [] : (tensor<ui32>) -> tensor<12x8xui32> loc(#loc134)
    %169 = stablehlo.shift_right_logical %166, %168 : tensor<12x8xui32> loc(#loc134)
    %170 = stablehlo.constant dense<1065353216> : tensor<ui32> loc(#loc)
    %171 = stablehlo.broadcast_in_dim %170, dims = [] : (tensor<ui32>) -> tensor<12x8xui32> loc(#loc135)
    %172 = stablehlo.or %169, %171 : tensor<12x8xui32> loc(#loc135)
    %173 = stablehlo.bitcast_convert %172 : (tensor<12x8xui32>) -> tensor<12x8xf32> loc(#loc136)
    %174 = stablehlo.constant dense<1.000000e+00> : tensor<f32> loc(#loc)
    %175 = stablehlo.broadcast_in_dim %174, dims = [] : (tensor<f32>) -> tensor<12x8xf32> loc(#loc137)
    %176 = stablehlo.subtract %173, %175 : tensor<12x8xf32> loc(#loc137)
    %177 = stablehlo.subtract %145, %144 : tensor<1x1xf32> loc(#loc137)
    %178 = stablehlo.broadcast_in_dim %177, dims = [0, 1] : (tensor<1x1xf32>) -> tensor<12x8xf32> loc(#loc138)
    %179 = stablehlo.multiply %176, %178 : tensor<12x8xf32> loc(#loc138)
    %180 = stablehlo.broadcast_in_dim %144, dims = [0, 1] : (tensor<1x1xf32>) -> tensor<12x8xf32> loc(#loc118)
    %181 = stablehlo.add %179, %180 : tensor<12x8xf32> loc(#loc118)
    %182 = stablehlo.broadcast_in_dim %144, dims = [0, 1] : (tensor<1x1xf32>) -> tensor<12x8xf32> loc(#loc139)
    %183 = stablehlo.maximum %182, %181 : tensor<12x8xf32> loc(#loc139)
    %184 = chlo.erf_inv %183 : tensor<12x8xf32> -> tensor<12x8xf32> loc(#loc140)
    %185 = stablehlo.constant dense<1.41421354> : tensor<f32> loc(#loc)
    %186 = stablehlo.broadcast_in_dim %185, dims = [] : (tensor<f32>) -> tensor<12x8xf32> loc(#loc138)
    %187 = stablehlo.multiply %186, %184 : tensor<12x8xf32> loc(#loc138)
    %188 = stablehlo.constant dense<-2.000000e+00> : tensor<f32> loc(#loc)
    %189 = stablehlo.constant dense<0x7F800000> : tensor<f32> loc(#loc)
    %190 = chlo.next_after %188, %189 : tensor<f32>, tensor<f32> -> tensor<f32> loc(#loc141)
    %191 = stablehlo.constant dense<2.000000e+00> : tensor<f32> loc(#loc)
    %192 = stablehlo.constant dense<0xFF800000> : tensor<f32> loc(#loc)
    %193 = chlo.next_after %191, %192 : tensor<f32>, tensor<f32> -> tensor<f32> loc(#loc141)
    %194 = call @clip_0(%187, %190, %193) : (tensor<12x8xf32>, tensor<f32>, tensor<f32>) -> tensor<12x8xf32> loc(#loc142)
    %195 = stablehlo.broadcast_in_dim %135, dims = [] : (tensor<f32>) -> tensor<12x8xf32> loc(#loc138)
    %196 = stablehlo.multiply %194, %195 : tensor<12x8xf32> loc(#loc138)
    %197 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc)
    %198 = stablehlo.broadcast_in_dim %197, dims = [] : (tensor<f32>) -> tensor<8xf32> loc(#loc143)
    %199 = stablehlo.constant dense<1369348361> : tensor<ui32> loc(#loc)
    %200 = stablehlo.constant dense<32> : tensor<ui32> loc(#loc144)
    %201 = stablehlo.shift_right_logical %199, %200 : tensor<ui32> loc(#loc145)
    %202 = stablehlo.reshape %201 : (tensor<ui32>) -> tensor<1xui32> loc(#loc146)
    %203 = stablehlo.constant dense<4294967295> : tensor<ui32> loc(#loc144)
    %204 = stablehlo.and %199, %203 : tensor<ui32> loc(#loc147)
    %205 = stablehlo.reshape %204 : (tensor<ui32>) -> tensor<1xui32> loc(#loc146)
    %206 = stablehlo.concatenate %202, %205, dim = 0 : (tensor<1xui32>, tensor<1xui32>) -> tensor<2xui32> loc(#loc148)
    %207 = "stablehlo.slice"(%10) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xui32>) -> tensor<1xui32> loc(#loc149)
    %208 = stablehlo.reshape %207 : (tensor<1xui32>) -> tensor<ui32> loc(#loc150)
    %209 = "stablehlo.slice"(%10) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xui32>) -> tensor<1xui32> loc(#loc151)
    %210 = stablehlo.reshape %209 : (tensor<1xui32>) -> tensor<ui32> loc(#loc150)
    %211 = "stablehlo.slice"(%206) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xui32>) -> tensor<1xui32> loc(#loc152)
    %212 = "stablehlo.slice"(%206) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xui32>) -> tensor<1xui32> loc(#loc153)
    %213 = stablehlo.constant dense<[13, 15, 26, 6]> : tensor<4xui32> loc(#loc154)
    %214 = stablehlo.constant dense<[17, 29, 16, 24]> : tensor<4xui32> loc(#loc154)
    %215 = stablehlo.xor %208, %210 : tensor<ui32> loc(#loc155)
    %216 = stablehlo.constant dense<466688986> : tensor<ui32> loc(#loc154)
    %217 = stablehlo.xor %215, %216 : tensor<ui32> loc(#loc155)
    %218 = stablehlo.broadcast_in_dim %208, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc156)
    %219 = stablehlo.add %211, %218 : tensor<1xui32> loc(#loc156)
    %220 = stablehlo.broadcast_in_dim %210, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc156)
    %221 = stablehlo.add %212, %220 : tensor<1xui32> loc(#loc156)
    %222 = stablehlo.constant dense<0> : tensor<i32> loc(#loc154)
    %223 = stablehlo.constant dense<0> : tensor<i32> loc(#loc157)
    %224:9 = stablehlo.while(%iterArg = %223, %iterArg_0 = %222, %iterArg_1 = %219, %iterArg_2 = %221, %iterArg_3 = %210, %iterArg_4 = %217, %iterArg_5 = %208, %iterArg_6 = %213, %iterArg_7 = %214) : tensor<i32>, tensor<i32>, tensor<1xui32>, tensor<1xui32>, tensor<ui32>, tensor<ui32>, tensor<ui32>, tensor<4xui32>, tensor<4xui32>
     cond {
      %307 = stablehlo.constant dense<5> : tensor<i32> loc(#loc158)
      %308 = stablehlo.compare  LT, %iterArg, %307,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc159)
      stablehlo.return %308 : tensor<i1> loc(#loc158)
    } do {
      %307 = stablehlo.constant dense<1> : tensor<i32> loc(#loc158)
      %308 = stablehlo.add %iterArg_0, %307 : tensor<i32> loc(#loc160)
      %309 = "stablehlo.slice"(%iterArg_6) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xui32>) -> tensor<1xui32> loc(#loc161)
      %310 = stablehlo.reshape %309 : (tensor<1xui32>) -> tensor<ui32> loc(#loc162)
      %311 = stablehlo.add %iterArg_1, %iterArg_2 : tensor<1xui32> loc(#loc160)
      %312 = stablehlo.broadcast_in_dim %310, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc163)
      %313 = stablehlo.shift_left %iterArg_2, %312 : tensor<1xui32> loc(#loc163)
      %314 = stablehlo.constant dense<32> : tensor<ui32> loc(#loc158)
      %315 = stablehlo.subtract %314, %310 : tensor<ui32> loc(#loc164)
      %316 = stablehlo.broadcast_in_dim %315, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc165)
      %317 = stablehlo.shift_right_logical %iterArg_2, %316 : tensor<1xui32> loc(#loc165)
      %318 = stablehlo.or %313, %317 : tensor<1xui32> loc(#loc166)
      %319 = stablehlo.xor %311, %318 : tensor<1xui32> loc(#loc167)
      %320 = "stablehlo.slice"(%iterArg_6) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xui32>) -> tensor<1xui32> loc(#loc168)
      %321 = stablehlo.reshape %320 : (tensor<1xui32>) -> tensor<ui32> loc(#loc162)
      %322 = stablehlo.add %311, %319 : tensor<1xui32> loc(#loc160)
      %323 = stablehlo.broadcast_in_dim %321, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc163)
      %324 = stablehlo.shift_left %319, %323 : tensor<1xui32> loc(#loc163)
      %325 = stablehlo.constant dense<32> : tensor<ui32> loc(#loc158)
      %326 = stablehlo.subtract %325, %321 : tensor<ui32> loc(#loc164)
      %327 = stablehlo.broadcast_in_dim %326, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc165)
      %328 = stablehlo.shift_right_logical %319, %327 : tensor<1xui32> loc(#loc165)
      %329 = stablehlo.or %324, %328 : tensor<1xui32> loc(#loc166)
      %330 = stablehlo.xor %322, %329 : tensor<1xui32> loc(#loc167)
      %331 = "stablehlo.slice"(%iterArg_6) {limit_indices = dense<3> : tensor<1xi64>, start_indices = dense<2> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xui32>) -> tensor<1xui32> loc(#loc169)
      %332 = stablehlo.reshape %331 : (tensor<1xui32>) -> tensor<ui32> loc(#loc162)
      %333 = stablehlo.add %322, %330 : tensor<1xui32> loc(#loc160)
      %334 = stablehlo.broadcast_in_dim %332, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc163)
      %335 = stablehlo.shift_left %330, %334 : tensor<1xui32> loc(#loc163)
      %336 = stablehlo.constant dense<32> : tensor<ui32> loc(#loc158)
      %337 = stablehlo.subtract %336, %332 : tensor<ui32> loc(#loc164)
      %338 = stablehlo.broadcast_in_dim %337, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc165)
      %339 = stablehlo.shift_right_logical %330, %338 : tensor<1xui32> loc(#loc165)
      %340 = stablehlo.or %335, %339 : tensor<1xui32> loc(#loc166)
      %341 = stablehlo.xor %333, %340 : tensor<1xui32> loc(#loc167)
      %342 = "stablehlo.slice"(%iterArg_6) {limit_indices = dense<4> : tensor<1xi64>, start_indices = dense<3> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xui32>) -> tensor<1xui32> loc(#loc170)
      %343 = stablehlo.reshape %342 : (tensor<1xui32>) -> tensor<ui32> loc(#loc162)
      %344 = stablehlo.add %333, %341 : tensor<1xui32> loc(#loc160)
      %345 = stablehlo.broadcast_in_dim %343, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc163)
      %346 = stablehlo.shift_left %341, %345 : tensor<1xui32> loc(#loc163)
      %347 = stablehlo.constant dense<32> : tensor<ui32> loc(#loc158)
      %348 = stablehlo.subtract %347, %343 : tensor<ui32> loc(#loc164)
      %349 = stablehlo.broadcast_in_dim %348, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc165)
      %350 = stablehlo.shift_right_logical %341, %349 : tensor<1xui32> loc(#loc165)
      %351 = stablehlo.or %346, %350 : tensor<1xui32> loc(#loc166)
      %352 = stablehlo.xor %344, %351 : tensor<1xui32> loc(#loc167)
      %353 = stablehlo.broadcast_in_dim %iterArg_3, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc160)
      %354 = stablehlo.add %344, %353 : tensor<1xui32> loc(#loc160)
      %355 = stablehlo.broadcast_in_dim %iterArg_4, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc160)
      %356 = stablehlo.add %352, %355 : tensor<1xui32> loc(#loc160)
      %357 = stablehlo.constant dense<1> : tensor<i32> loc(#loc158)
      %358 = stablehlo.add %iterArg_0, %357 : tensor<i32> loc(#loc160)
      %359 = stablehlo.convert %358 : (tensor<i32>) -> tensor<ui32> loc(#loc171)
      %360 = stablehlo.broadcast_in_dim %359, dims = [] : (tensor<ui32>) -> tensor<1xui32> loc(#loc160)
      %361 = stablehlo.add %356, %360 : tensor<1xui32> loc(#loc160)
      %362 = stablehlo.constant dense<1> : tensor<i32> loc(#loc158)
      %363 = stablehlo.add %iterArg, %362 : tensor<i32> loc(#loc160)
      stablehlo.return %363, %308, %354, %361, %iterArg_4, %iterArg_5, %iterArg_3, %iterArg_7, %iterArg_6 : tensor<i32>, tensor<i32>, tensor<1xui32>, tensor<1xui32>, tensor<ui32>, tensor<ui32>, tensor<ui32>, tensor<4xui32>, tensor<4xui32> loc(#loc158)
    } loc(#loc158)
    %225 = stablehlo.concatenate %224#2, %224#3, dim = 0 : (tensor<1xui32>, tensor<1xui32>) -> tensor<2xui32> loc(#loc148)
    %226 = stablehlo.constant dense<1.250000e-01> : tensor<f32> loc(#loc)
    %227 = stablehlo.sqrt %226 : tensor<f32> loc(#loc172)
    %228 = stablehlo.constant dense<0.879625678> : tensor<f32> loc(#loc)
    %229 = stablehlo.divide %227, %228 : tensor<f32> loc(#loc173)
    %230 = stablehlo.constant dense<-2.000000e+00> : tensor<f32> loc(#loc)
    %231 = stablehlo.constant dense<1.41421354> : tensor<f32> loc(#loc)
    %232 = stablehlo.divide %230, %231 : tensor<f32> loc(#loc173)
    %233 = chlo.erf %232 : tensor<f32> -> tensor<f32> loc(#loc174)
    %234 = stablehlo.constant dense<2.000000e+00> : tensor<f32> loc(#loc)
    %235 = stablehlo.constant dense<1.41421354> : tensor<f32> loc(#loc)
    %236 = stablehlo.divide %234, %235 : tensor<f32> loc(#loc173)
    %237 = chlo.erf %236 : tensor<f32> -> tensor<f32> loc(#loc174)
    %238 = stablehlo.broadcast_in_dim %233, dims = [] : (tensor<f32>) -> tensor<1x1xf32> loc(#loc175)
    %239 = stablehlo.broadcast_in_dim %237, dims = [] : (tensor<f32>) -> tensor<1x1xf32> loc(#loc175)
    %240 = stablehlo.iota dim = 0 : tensor<32xui32> loc(#loc176)
    %241 = "stablehlo.slice"(%225) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xui32>) -> tensor<1xui32> loc(#loc177)
    %242 = stablehlo.reshape %241 : (tensor<1xui32>) -> tensor<ui32> loc(#loc178)
    %243 = "stablehlo.slice"(%225) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<2xui32>) -> tensor<1xui32> loc(#loc179)
    %244 = stablehlo.reshape %243 : (tensor<1xui32>) -> tensor<ui32> loc(#loc178)
    %245 = "stablehlo.slice"(%240) {limit_indices = dense<16> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<32xui32>) -> tensor<16xui32> loc(#loc180)
    %246 = "stablehlo.slice"(%240) {limit_indices = dense<32> : tensor<1xi64>, start_indices = dense<16> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<32xui32>) -> tensor<16xui32> loc(#loc181)
    %247 = stablehlo.constant dense<[13, 15, 26, 6]> : tensor<4xui32> loc(#loc182)
    %248 = stablehlo.constant dense<[17, 29, 16, 24]> : tensor<4xui32> loc(#loc182)
    %249 = stablehlo.xor %242, %244 : tensor<ui32> loc(#loc155)
    %250 = stablehlo.constant dense<466688986> : tensor<ui32> loc(#loc182)
    %251 = stablehlo.xor %249, %250 : tensor<ui32> loc(#loc155)
    %252 = stablehlo.broadcast_in_dim %242, dims = [] : (tensor<ui32>) -> tensor<16xui32> loc(#loc183)
    %253 = stablehlo.add %245, %252 : tensor<16xui32> loc(#loc183)
    %254 = stablehlo.broadcast_in_dim %244, dims = [] : (tensor<ui32>) -> tensor<16xui32> loc(#loc183)
    %255 = stablehlo.add %246, %254 : tensor<16xui32> loc(#loc183)
    %256 = stablehlo.constant dense<0> : tensor<i32> loc(#loc182)
    %257 = stablehlo.constant dense<0> : tensor<i32> loc(#loc184)
    %258:9 = stablehlo.while(%iterArg = %257, %iterArg_0 = %256, %iterArg_1 = %253, %iterArg_2 = %255, %iterArg_3 = %244, %iterArg_4 = %251, %iterArg_5 = %242, %iterArg_6 = %247, %iterArg_7 = %248) : tensor<i32>, tensor<i32>, tensor<16xui32>, tensor<16xui32>, tensor<ui32>, tensor<ui32>, tensor<ui32>, tensor<4xui32>, tensor<4xui32>
     cond {
      %307 = stablehlo.constant dense<5> : tensor<i32> loc(#loc185)
      %308 = stablehlo.compare  LT, %iterArg, %307,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1> loc(#loc159)
      stablehlo.return %308 : tensor<i1> loc(#loc185)
    } do {
      %307 = stablehlo.constant dense<1> : tensor<i32> loc(#loc185)
      %308 = stablehlo.add %iterArg_0, %307 : tensor<i32> loc(#loc160)
      %309 = "stablehlo.slice"(%iterArg_6) {limit_indices = dense<1> : tensor<1xi64>, start_indices = dense<0> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xui32>) -> tensor<1xui32> loc(#loc186)
      %310 = stablehlo.reshape %309 : (tensor<1xui32>) -> tensor<ui32> loc(#loc187)
      %311 = stablehlo.add %iterArg_1, %iterArg_2 : tensor<16xui32> loc(#loc188)
      %312 = stablehlo.broadcast_in_dim %310, dims = [] : (tensor<ui32>) -> tensor<16xui32> loc(#loc189)
      %313 = stablehlo.shift_left %iterArg_2, %312 : tensor<16xui32> loc(#loc189)
      %314 = stablehlo.constant dense<32> : tensor<ui32> loc(#loc185)
      %315 = stablehlo.subtract %314, %310 : tensor<ui32> loc(#loc164)
      %316 = stablehlo.broadcast_in_dim %315, dims = [] : (tensor<ui32>) -> tensor<16xui32> loc(#loc190)
      %317 = stablehlo.shift_right_logical %iterArg_2, %316 : tensor<16xui32> loc(#loc190)
      %318 = stablehlo.or %313, %317 : tensor<16xui32> loc(#loc191)
      %319 = stablehlo.xor %311, %318 : tensor<16xui32> loc(#loc192)
      %320 = "stablehlo.slice"(%iterArg_6) {limit_indices = dense<2> : tensor<1xi64>, start_indices = dense<1> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xui32>) -> tensor<1xui32> loc(#loc193)
      %321 = stablehlo.reshape %320 : (tensor<1xui32>) -> tensor<ui32> loc(#loc187)
      %322 = stablehlo.add %311, %319 : tensor<16xui32> loc(#loc188)
      %323 = stablehlo.broadcast_in_dim %321, dims = [] : (tensor<ui32>) -> tensor<16xui32> loc(#loc189)
      %324 = stablehlo.shift_left %319, %323 : tensor<16xui32> loc(#loc189)
      %325 = stablehlo.constant dense<32> : tensor<ui32> loc(#loc185)
      %326 = stablehlo.subtract %325, %321 : tensor<ui32> loc(#loc164)
      %327 = stablehlo.broadcast_in_dim %326, dims = [] : (tensor<ui32>) -> tensor<16xui32> loc(#loc190)
      %328 = stablehlo.shift_right_logical %319, %327 : tensor<16xui32> loc(#loc190)
      %329 = stablehlo.or %324, %328 : tensor<16xui32> loc(#loc191)
      %330 = stablehlo.xor %322, %329 : tensor<16xui32> loc(#loc192)
      %331 = "stablehlo.slice"(%iterArg_6) {limit_indices = dense<3> : tensor<1xi64>, start_indices = dense<2> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xui32>) -> tensor<1xui32> loc(#loc194)
      %332 = stablehlo.reshape %331 : (tensor<1xui32>) -> tensor<ui32> loc(#loc187)
      %333 = stablehlo.add %322, %330 : tensor<16xui32> loc(#loc188)
      %334 = stablehlo.broadcast_in_dim %332, dims = [] : (tensor<ui32>) -> tensor<16xui32> loc(#loc189)
      %335 = stablehlo.shift_left %330, %334 : tensor<16xui32> loc(#loc189)
      %336 = stablehlo.constant dense<32> : tensor<ui32> loc(#loc185)
      %337 = stablehlo.subtract %336, %332 : tensor<ui32> loc(#loc164)
      %338 = stablehlo.broadcast_in_dim %337, dims = [] : (tensor<ui32>) -> tensor<16xui32> loc(#loc190)
      %339 = stablehlo.shift_right_logical %330, %338 : tensor<16xui32> loc(#loc190)
      %340 = stablehlo.or %335, %339 : tensor<16xui32> loc(#loc191)
      %341 = stablehlo.xor %333, %340 : tensor<16xui32> loc(#loc192)
      %342 = "stablehlo.slice"(%iterArg_6) {limit_indices = dense<4> : tensor<1xi64>, start_indices = dense<3> : tensor<1xi64>, strides = dense<1> : tensor<1xi64>} : (tensor<4xui32>) -> tensor<1xui32> loc(#loc195)
      %343 = stablehlo.reshape %342 : (tensor<1xui32>) -> tensor<ui32> loc(#loc187)
      %344 = stablehlo.add %333, %341 : tensor<16xui32> loc(#loc188)
      %345 = stablehlo.broadcast_in_dim %343, dims = [] : (tensor<ui32>) -> tensor<16xui32> loc(#loc189)
      %346 = stablehlo.shift_left %341, %345 : tensor<16xui32> loc(#loc189)
      %347 = stablehlo.constant dense<32> : tensor<ui32> loc(#loc185)
      %348 = stablehlo.subtract %347, %343 : tensor<ui32> loc(#loc164)
      %349 = stablehlo.broadcast_in_dim %348, dims = [] : (tensor<ui32>) -> tensor<16xui32> loc(#loc190)
      %350 = stablehlo.shift_right_logical %341, %349 : tensor<16xui32> loc(#loc190)
      %351 = stablehlo.or %346, %350 : tensor<16xui32> loc(#loc191)
      %352 = stablehlo.xor %344, %351 : tensor<16xui32> loc(#loc192)
      %353 = stablehlo.broadcast_in_dim %iterArg_3, dims = [] : (tensor<ui32>) -> tensor<16xui32> loc(#loc188)
      %354 = stablehlo.add %344, %353 : tensor<16xui32> loc(#loc188)
      %355 = stablehlo.broadcast_in_dim %iterArg_4, dims = [] : (tensor<ui32>) -> tensor<16xui32> loc(#loc188)
      %356 = stablehlo.add %352, %355 : tensor<16xui32> loc(#loc188)
      %357 = stablehlo.constant dense<1> : tensor<i32> loc(#loc185)
      %358 = stablehlo.add %iterArg_0, %357 : tensor<i32> loc(#loc160)
      %359 = stablehlo.convert %358 : (tensor<i32>) -> tensor<ui32> loc(#loc196)
      %360 = stablehlo.broadcast_in_dim %359, dims = [] : (tensor<ui32>) -> tensor<16xui32> loc(#loc188)
      %361 = stablehlo.add %356, %360 : tensor<16xui32> loc(#loc188)
      %362 = stablehlo.constant dense<1> : tensor<i32> loc(#loc185)
      %363 = stablehlo.add %iterArg, %362 : tensor<i32> loc(#loc160)
      stablehlo.return %363, %308, %354, %361, %iterArg_4, %iterArg_5, %iterArg_3, %iterArg_7, %iterArg_6 : tensor<i32>, tensor<i32>, tensor<16xui32>, tensor<16xui32>, tensor<ui32>, tensor<ui32>, tensor<ui32>, tensor<4xui32>, tensor<4xui32> loc(#loc185)
    } loc(#loc185)
    %259 = stablehlo.concatenate %258#2, %258#3, dim = 0 : (tensor<16xui32>, tensor<16xui32>) -> tensor<32xui32> loc(#loc197)
    %260 = stablehlo.reshape %259 : (tensor<32xui32>) -> tensor<8x4xui32> loc(#loc198)
    %261 = stablehlo.constant dense<9> : tensor<ui32> loc(#loc)
    %262 = stablehlo.broadcast_in_dim %261, dims = [] : (tensor<ui32>) -> tensor<8x4xui32> loc(#loc199)
    %263 = stablehlo.shift_right_logical %260, %262 : tensor<8x4xui32> loc(#loc199)
    %264 = stablehlo.constant dense<1065353216> : tensor<ui32> loc(#loc)
    %265 = stablehlo.broadcast_in_dim %264, dims = [] : (tensor<ui32>) -> tensor<8x4xui32> loc(#loc200)
    %266 = stablehlo.or %263, %265 : tensor<8x4xui32> loc(#loc200)
    %267 = stablehlo.bitcast_convert %266 : (tensor<8x4xui32>) -> tensor<8x4xf32> loc(#loc201)
    %268 = stablehlo.constant dense<1.000000e+00> : tensor<f32> loc(#loc)
    %269 = stablehlo.broadcast_in_dim %268, dims = [] : (tensor<f32>) -> tensor<8x4xf32> loc(#loc202)
    %270 = stablehlo.subtract %267, %269 : tensor<8x4xf32> loc(#loc202)
    %271 = stablehlo.subtract %239, %238 : tensor<1x1xf32> loc(#loc202)
    %272 = stablehlo.broadcast_in_dim %271, dims = [0, 1] : (tensor<1x1xf32>) -> tensor<8x4xf32> loc(#loc203)
    %273 = stablehlo.multiply %270, %272 : tensor<8x4xf32> loc(#loc203)
    %274 = stablehlo.broadcast_in_dim %238, dims = [0, 1] : (tensor<1x1xf32>) -> tensor<8x4xf32> loc(#loc183)
    %275 = stablehlo.add %273, %274 : tensor<8x4xf32> loc(#loc183)
    %276 = stablehlo.broadcast_in_dim %238, dims = [0, 1] : (tensor<1x1xf32>) -> tensor<8x4xf32> loc(#loc204)
    %277 = stablehlo.maximum %276, %275 : tensor<8x4xf32> loc(#loc204)
    %278 = chlo.erf_inv %277 : tensor<8x4xf32> -> tensor<8x4xf32> loc(#loc205)
    %279 = stablehlo.constant dense<1.41421354> : tensor<f32> loc(#loc)
    %280 = stablehlo.broadcast_in_dim %279, dims = [] : (tensor<f32>) -> tensor<8x4xf32> loc(#loc203)
    %281 = stablehlo.multiply %280, %278 : tensor<8x4xf32> loc(#loc203)
    %282 = stablehlo.constant dense<-2.000000e+00> : tensor<f32> loc(#loc)
    %283 = stablehlo.constant dense<0x7F800000> : tensor<f32> loc(#loc)
    %284 = chlo.next_after %282, %283 : tensor<f32>, tensor<f32> -> tensor<f32> loc(#loc206)
    %285 = stablehlo.constant dense<2.000000e+00> : tensor<f32> loc(#loc)
    %286 = stablehlo.constant dense<0xFF800000> : tensor<f32> loc(#loc)
    %287 = chlo.next_after %285, %286 : tensor<f32>, tensor<f32> -> tensor<f32> loc(#loc206)
    %288 = call @clip_1(%281, %284, %287) : (tensor<8x4xf32>, tensor<f32>, tensor<f32>) -> tensor<8x4xf32> loc(#loc207)
    %289 = stablehlo.broadcast_in_dim %229, dims = [] : (tensor<f32>) -> tensor<8x4xf32> loc(#loc203)
    %290 = stablehlo.multiply %288, %289 : tensor<8x4xf32> loc(#loc203)
    %291 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc)
    %292 = stablehlo.broadcast_in_dim %291, dims = [] : (tensor<f32>) -> tensor<4xf32> loc(#loc208)
    %293 = stablehlo.dot_general %arg0, %102, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<32x10xf32>, tensor<10x12xf32>) -> tensor<32x12xf32> loc(#loc209)
    %294 = stablehlo.reshape %104 : (tensor<12xf32>) -> tensor<1x12xf32> loc(#loc210)
    %295 = stablehlo.broadcast_in_dim %294, dims = [0, 1] : (tensor<1x12xf32>) -> tensor<32x12xf32> loc(#loc211)
    %296 = stablehlo.add %293, %295 : tensor<32x12xf32> loc(#loc211)
    %297 = call @relu(%296) : (tensor<32x12xf32>) -> tensor<32x12xf32> loc(#loc212)
    %298 = stablehlo.dot_general %297, %196, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<32x12xf32>, tensor<12x8xf32>) -> tensor<32x8xf32> loc(#loc213)
    %299 = stablehlo.reshape %198 : (tensor<8xf32>) -> tensor<1x8xf32> loc(#loc214)
    %300 = stablehlo.broadcast_in_dim %299, dims = [0, 1] : (tensor<1x8xf32>) -> tensor<32x8xf32> loc(#loc215)
    %301 = stablehlo.add %298, %300 : tensor<32x8xf32> loc(#loc215)
    %302 = call @relu_2(%301) : (tensor<32x8xf32>) -> tensor<32x8xf32> loc(#loc212)
    %303 = stablehlo.dot_general %302, %290, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<32x8xf32>, tensor<8x4xf32>) -> tensor<32x4xf32> loc(#loc216)
    %304 = stablehlo.reshape %292 : (tensor<4xf32>) -> tensor<1x4xf32> loc(#loc217)
    %305 = stablehlo.broadcast_in_dim %304, dims = [0, 1] : (tensor<1x4xf32>) -> tensor<32x4xf32> loc(#loc218)
    %306 = stablehlo.add %303, %305 : tensor<32x4xf32> loc(#loc218)
    return %306 : tensor<32x4xf32> loc(#loc)
  } loc(#loc)
  func.func private @clip(%arg0: tensor<10x12xf32> loc(unknown), %arg1: tensor<f32> loc(unknown), %arg2: tensor<f32> loc(unknown)) -> tensor<10x12xf32> {
    %0 = stablehlo.broadcast_in_dim %arg1, dims = [] : (tensor<f32>) -> tensor<10x12xf32> loc(#loc219)
    %1 = stablehlo.maximum %0, %arg0 : tensor<10x12xf32> loc(#loc219)
    %2 = stablehlo.broadcast_in_dim %arg2, dims = [] : (tensor<f32>) -> tensor<10x12xf32> loc(#loc220)
    %3 = stablehlo.minimum %2, %1 : tensor<10x12xf32> loc(#loc220)
    return %3 : tensor<10x12xf32> loc(#loc77)
  } loc(#loc77)
  func.func private @clip_0(%arg0: tensor<12x8xf32> loc(unknown), %arg1: tensor<f32> loc(unknown), %arg2: tensor<f32> loc(unknown)) -> tensor<12x8xf32> {
    %0 = stablehlo.broadcast_in_dim %arg1, dims = [] : (tensor<f32>) -> tensor<12x8xf32> loc(#loc221)
    %1 = stablehlo.maximum %0, %arg0 : tensor<12x8xf32> loc(#loc221)
    %2 = stablehlo.broadcast_in_dim %arg2, dims = [] : (tensor<f32>) -> tensor<12x8xf32> loc(#loc222)
    %3 = stablehlo.minimum %2, %1 : tensor<12x8xf32> loc(#loc222)
    return %3 : tensor<12x8xf32> loc(#loc142)
  } loc(#loc142)
  func.func private @clip_1(%arg0: tensor<8x4xf32> loc(unknown), %arg1: tensor<f32> loc(unknown), %arg2: tensor<f32> loc(unknown)) -> tensor<8x4xf32> {
    %0 = stablehlo.broadcast_in_dim %arg1, dims = [] : (tensor<f32>) -> tensor<8x4xf32> loc(#loc223)
    %1 = stablehlo.maximum %0, %arg0 : tensor<8x4xf32> loc(#loc223)
    %2 = stablehlo.broadcast_in_dim %arg2, dims = [] : (tensor<f32>) -> tensor<8x4xf32> loc(#loc224)
    %3 = stablehlo.minimum %2, %1 : tensor<8x4xf32> loc(#loc224)
    return %3 : tensor<8x4xf32> loc(#loc207)
  } loc(#loc207)
  func.func private @relu(%arg0: tensor<32x12xf32> loc(unknown)) -> tensor<32x12xf32> {
    %0 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc212)
    %1 = stablehlo.broadcast_in_dim %0, dims = [] : (tensor<f32>) -> tensor<32x12xf32> loc(#loc225)
    %2 = stablehlo.maximum %arg0, %1 : tensor<32x12xf32> loc(#loc225)
    return %2 : tensor<32x12xf32> loc(#loc212)
  } loc(#loc212)
  func.func private @relu_2(%arg0: tensor<32x8xf32> loc(unknown)) -> tensor<32x8xf32> {
    %0 = stablehlo.constant dense<0.000000e+00> : tensor<f32> loc(#loc212)
    %1 = stablehlo.broadcast_in_dim %0, dims = [] : (tensor<f32>) -> tensor<32x8xf32> loc(#loc225)
    %2 = stablehlo.maximum %arg0, %1 : tensor<32x8xf32> loc(#loc225)
    return %2 : tensor<32x8xf32> loc(#loc212)
  } loc(#loc212)
} loc(#loc)
#loc1 = loc("/usr/local/google/home/scotttodd/code/scratch/iree/jax/jax_mlp.py":22:0)
#loc2 = loc("/usr/local/google/home/scotttodd/code/scratch/iree/jax/.venv/lib/python3.10/site-packages/flax/core/scope.py":153:0)
#loc3 = loc("/usr/local/google/home/scotttodd/code/scratch/iree/jax/.venv/lib/python3.10/site-packages/flax/core/scope.py":842:0)
#loc4 = loc("/usr/local/google/home/scotttodd/code/scratch/iree/jax/.venv/lib/python3.10/site-packages/flax/linen/linear.py":206:0)
#loc5 = loc("/usr/local/google/home/scotttodd/code/scratch/iree/jax/.venv/lib/python3.10/site-packages/flax/linen/linear.py":213:0)
#loc6 = loc("/usr/local/google/home/scotttodd/code/scratch/iree/jax/jax_mlp.py":13:0)
#loc7 = loc("jit(run_mlp)/jit(main)/random_seed[impl=fry]"(#loc1))
#loc8 = loc("jit(run_mlp)/jit(main)/shift_right_logical"(#loc1))
#loc9 = loc("jit(run_mlp)/jit(main)/convert_element_type[new_dtype=uint32 weak_type=False]"(#loc1))
#loc10 = loc("jit(run_mlp)/jit(main)/reshape[new_sizes=(1,) dimensions=None]"(#loc1))
#loc11 = loc("jit(run_mlp)/jit(main)/convert_element_type[new_dtype=int32 weak_type=False]"(#loc1))
#loc12 = loc("jit(run_mlp)/jit(main)/and"(#loc1))
#loc13 = loc("jit(run_mlp)/jit(main)/concatenate[dimension=0]"(#loc1))
#loc14 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/random_fold_in"(#loc2))
#loc15 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/shift_right_logical"(#loc2))
#loc16 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/reshape[new_sizes=(1,) dimensions=None]"(#loc2))
#loc17 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/and"(#loc2))
#loc18 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/concatenate[dimension=0]"(#loc2))
#loc19 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/slice[start_indices=(0,) limit_indices=(1,) strides=(1,)]"(#loc2))
#loc20 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/squeeze[dimensions=(0,)]"(#loc2))
#loc21 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/slice[start_indices=(1,) limit_indices=(2,) strides=(1,)]"(#loc2))
#loc22 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/slice[start_indices=(0,) limit_indices=(1,) strides=None]"(#loc2))
#loc23 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/slice[start_indices=(1,) limit_indices=(2,) strides=None]"(#loc2))
#loc24 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/threefry2x32"(#loc2))
#loc25 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/xor"(#loc2))
#loc26 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/add"(#loc2))
#loc27 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/scan[reverse=False length=5 num_consts=0 num_carry=8 linear=(False, False, False, False, False, False, False, False) unroll=1]"(#loc2))
#loc28 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/while[cond_nconsts=0 body_nconsts=0]"(#loc2))
#loc29 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/while/cond/lt"(#loc2))
#loc30 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/while/body/add"(#loc2))
#loc31 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/while/body/slice[start_indices=(0,) limit_indices=(1,) strides=(1,)]"(#loc2))
#loc32 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/while/body/squeeze[dimensions=(0,)]"(#loc2))
#loc33 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/while/body/shift_left"(#loc2))
#loc34 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/while/body/sub"(#loc2))
#loc35 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/while/body/shift_right_logical"(#loc2))
#loc36 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/while/body/or"(#loc2))
#loc37 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/while/body/xor"(#loc2))
#loc38 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/while/body/slice[start_indices=(1,) limit_indices=(2,) strides=(1,)]"(#loc2))
#loc39 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/while/body/slice[start_indices=(2,) limit_indices=(3,) strides=(1,)]"(#loc2))
#loc40 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/while/body/slice[start_indices=(3,) limit_indices=(4,) strides=(1,)]"(#loc2))
#loc41 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/while/body/convert_element_type[new_dtype=uint32 weak_type=False]"(#loc2))
#loc42 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/sqrt"(#loc3))
#loc43 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/div"(#loc3))
#loc44 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/erf"(#loc3))
#loc45 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/broadcast_in_dim[shape=(1, 1) broadcast_dimensions=()]"(#loc3))
#loc46 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/iota[dtype=uint32 shape=(120,) dimension=0]"(#loc3))
#loc47 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/slice[start_indices=(0,) limit_indices=(1,) strides=(1,)]"(#loc3))
#loc48 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/squeeze[dimensions=(0,)]"(#loc3))
#loc49 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/slice[start_indices=(1,) limit_indices=(2,) strides=(1,)]"(#loc3))
#loc50 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/slice[start_indices=(0,) limit_indices=(60,) strides=None]"(#loc3))
#loc51 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/slice[start_indices=(60,) limit_indices=(120,) strides=None]"(#loc3))
#loc52 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/threefry2x32"(#loc3))
#loc53 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/add"(#loc3))
#loc54 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/scan[reverse=False length=5 num_consts=0 num_carry=8 linear=(False, False, False, False, False, False, False, False) unroll=1]"(#loc3))
#loc55 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/while[cond_nconsts=0 body_nconsts=0]"(#loc3))
#loc56 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/while/body/slice[start_indices=(0,) limit_indices=(1,) strides=(1,)]"(#loc3))
#loc57 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/while/body/squeeze[dimensions=(0,)]"(#loc3))
#loc58 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/while/body/add"(#loc3))
#loc59 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/while/body/shift_left"(#loc3))
#loc60 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/while/body/shift_right_logical"(#loc3))
#loc61 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/while/body/or"(#loc3))
#loc62 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/while/body/xor"(#loc3))
#loc63 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/while/body/slice[start_indices=(1,) limit_indices=(2,) strides=(1,)]"(#loc3))
#loc64 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/while/body/slice[start_indices=(2,) limit_indices=(3,) strides=(1,)]"(#loc3))
#loc65 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/while/body/slice[start_indices=(3,) limit_indices=(4,) strides=(1,)]"(#loc3))
#loc66 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/while/body/convert_element_type[new_dtype=uint32 weak_type=False]"(#loc3))
#loc67 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/concatenate[dimension=0]"(#loc3))
#loc68 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/reshape[new_sizes=(10, 12) dimensions=None]"(#loc3))
#loc69 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/shift_right_logical"(#loc3))
#loc70 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/or"(#loc3))
#loc71 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/bitcast_convert_type[new_dtype=float32]"(#loc3))
#loc72 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/sub"(#loc3))
#loc73 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/mul"(#loc3))
#loc74 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/max"(#loc3))
#loc75 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/erf_inv"(#loc3))
#loc76 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/nextafter"(#loc3))
#loc77 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/pjit[in_shardings=(UnspecifiedValue, UnspecifiedValue, UnspecifiedValue) out_shardings=(UnspecifiedValue,) resource_env=None donated_invars=(False, False, False) name=clip keep_unused=False inline=False]"(#loc3))
#loc78 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/broadcast_in_dim[shape=(12,) broadcast_dimensions=()]"(#loc3))
#loc79 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/random_fold_in"(#loc2))
#loc80 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/shift_right_logical"(#loc2))
#loc81 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/reshape[new_sizes=(1,) dimensions=None]"(#loc2))
#loc82 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/and"(#loc2))
#loc83 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/concatenate[dimension=0]"(#loc2))
#loc84 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/slice[start_indices=(0,) limit_indices=(1,) strides=(1,)]"(#loc2))
#loc85 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/squeeze[dimensions=(0,)]"(#loc2))
#loc86 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/slice[start_indices=(1,) limit_indices=(2,) strides=(1,)]"(#loc2))
#loc87 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/slice[start_indices=(0,) limit_indices=(1,) strides=None]"(#loc2))
#loc88 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/slice[start_indices=(1,) limit_indices=(2,) strides=None]"(#loc2))
#loc89 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/threefry2x32"(#loc2))
#loc90 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/xor"(#loc2))
#loc91 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/add"(#loc2))
#loc92 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/scan[reverse=False length=5 num_consts=0 num_carry=8 linear=(False, False, False, False, False, False, False, False) unroll=1]"(#loc2))
#loc93 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/while[cond_nconsts=0 body_nconsts=0]"(#loc2))
#loc94 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/while/cond/lt"(#loc2))
#loc95 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/while/body/add"(#loc2))
#loc96 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/while/body/slice[start_indices=(0,) limit_indices=(1,) strides=(1,)]"(#loc2))
#loc97 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/while/body/squeeze[dimensions=(0,)]"(#loc2))
#loc98 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/while/body/shift_left"(#loc2))
#loc99 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/while/body/sub"(#loc2))
#loc100 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/while/body/shift_right_logical"(#loc2))
#loc101 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/while/body/or"(#loc2))
#loc102 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/while/body/xor"(#loc2))
#loc103 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/while/body/slice[start_indices=(1,) limit_indices=(2,) strides=(1,)]"(#loc2))
#loc104 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/while/body/slice[start_indices=(2,) limit_indices=(3,) strides=(1,)]"(#loc2))
#loc105 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/while/body/slice[start_indices=(3,) limit_indices=(4,) strides=(1,)]"(#loc2))
#loc106 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/while/body/convert_element_type[new_dtype=uint32 weak_type=False]"(#loc2))
#loc107 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/sqrt"(#loc3))
#loc108 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/div"(#loc3))
#loc109 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/erf"(#loc3))
#loc110 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/broadcast_in_dim[shape=(1, 1) broadcast_dimensions=()]"(#loc3))
#loc111 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/iota[dtype=uint32 shape=(96,) dimension=0]"(#loc3))
#loc112 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/slice[start_indices=(0,) limit_indices=(1,) strides=(1,)]"(#loc3))
#loc113 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/squeeze[dimensions=(0,)]"(#loc3))
#loc114 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/slice[start_indices=(1,) limit_indices=(2,) strides=(1,)]"(#loc3))
#loc115 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/slice[start_indices=(0,) limit_indices=(48,) strides=None]"(#loc3))
#loc116 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/slice[start_indices=(48,) limit_indices=(96,) strides=None]"(#loc3))
#loc117 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/threefry2x32"(#loc3))
#loc118 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/add"(#loc3))
#loc119 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/scan[reverse=False length=5 num_consts=0 num_carry=8 linear=(False, False, False, False, False, False, False, False) unroll=1]"(#loc3))
#loc120 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/while[cond_nconsts=0 body_nconsts=0]"(#loc3))
#loc121 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/while/body/slice[start_indices=(0,) limit_indices=(1,) strides=(1,)]"(#loc3))
#loc122 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/while/body/squeeze[dimensions=(0,)]"(#loc3))
#loc123 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/while/body/add"(#loc3))
#loc124 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/while/body/shift_left"(#loc3))
#loc125 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/while/body/shift_right_logical"(#loc3))
#loc126 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/while/body/or"(#loc3))
#loc127 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/while/body/xor"(#loc3))
#loc128 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/while/body/slice[start_indices=(1,) limit_indices=(2,) strides=(1,)]"(#loc3))
#loc129 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/while/body/slice[start_indices=(2,) limit_indices=(3,) strides=(1,)]"(#loc3))
#loc130 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/while/body/slice[start_indices=(3,) limit_indices=(4,) strides=(1,)]"(#loc3))
#loc131 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/while/body/convert_element_type[new_dtype=uint32 weak_type=False]"(#loc3))
#loc132 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/concatenate[dimension=0]"(#loc3))
#loc133 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/reshape[new_sizes=(12, 8) dimensions=None]"(#loc3))
#loc134 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/shift_right_logical"(#loc3))
#loc135 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/or"(#loc3))
#loc136 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/bitcast_convert_type[new_dtype=float32]"(#loc3))
#loc137 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/sub"(#loc3))
#loc138 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/mul"(#loc3))
#loc139 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/max"(#loc3))
#loc140 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/erf_inv"(#loc3))
#loc141 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/nextafter"(#loc3))
#loc142 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/pjit[in_shardings=(UnspecifiedValue, UnspecifiedValue, UnspecifiedValue) out_shardings=(UnspecifiedValue,) resource_env=None donated_invars=(False, False, False) name=clip keep_unused=False inline=False]"(#loc3))
#loc143 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/broadcast_in_dim[shape=(8,) broadcast_dimensions=()]"(#loc3))
#loc144 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/random_fold_in"(#loc2))
#loc145 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/shift_right_logical"(#loc2))
#loc146 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/reshape[new_sizes=(1,) dimensions=None]"(#loc2))
#loc147 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/and"(#loc2))
#loc148 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/concatenate[dimension=0]"(#loc2))
#loc149 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/slice[start_indices=(0,) limit_indices=(1,) strides=(1,)]"(#loc2))
#loc150 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/squeeze[dimensions=(0,)]"(#loc2))
#loc151 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/slice[start_indices=(1,) limit_indices=(2,) strides=(1,)]"(#loc2))
#loc152 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/slice[start_indices=(0,) limit_indices=(1,) strides=None]"(#loc2))
#loc153 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/slice[start_indices=(1,) limit_indices=(2,) strides=None]"(#loc2))
#loc154 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/threefry2x32"(#loc2))
#loc155 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/xor"(#loc2))
#loc156 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/add"(#loc2))
#loc157 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/scan[reverse=False length=5 num_consts=0 num_carry=8 linear=(False, False, False, False, False, False, False, False) unroll=1]"(#loc2))
#loc158 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/while[cond_nconsts=0 body_nconsts=0]"(#loc2))
#loc159 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/while/cond/lt"(#loc2))
#loc160 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/while/body/add"(#loc2))
#loc161 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/while/body/slice[start_indices=(0,) limit_indices=(1,) strides=(1,)]"(#loc2))
#loc162 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/while/body/squeeze[dimensions=(0,)]"(#loc2))
#loc163 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/while/body/shift_left"(#loc2))
#loc164 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/while/body/sub"(#loc2))
#loc165 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/while/body/shift_right_logical"(#loc2))
#loc166 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/while/body/or"(#loc2))
#loc167 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/while/body/xor"(#loc2))
#loc168 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/while/body/slice[start_indices=(1,) limit_indices=(2,) strides=(1,)]"(#loc2))
#loc169 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/while/body/slice[start_indices=(2,) limit_indices=(3,) strides=(1,)]"(#loc2))
#loc170 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/while/body/slice[start_indices=(3,) limit_indices=(4,) strides=(1,)]"(#loc2))
#loc171 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/while/body/convert_element_type[new_dtype=uint32 weak_type=False]"(#loc2))
#loc172 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/sqrt"(#loc3))
#loc173 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/div"(#loc3))
#loc174 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/erf"(#loc3))
#loc175 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/broadcast_in_dim[shape=(1, 1) broadcast_dimensions=()]"(#loc3))
#loc176 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/iota[dtype=uint32 shape=(32,) dimension=0]"(#loc3))
#loc177 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/slice[start_indices=(0,) limit_indices=(1,) strides=(1,)]"(#loc3))
#loc178 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/squeeze[dimensions=(0,)]"(#loc3))
#loc179 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/slice[start_indices=(1,) limit_indices=(2,) strides=(1,)]"(#loc3))
#loc180 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/slice[start_indices=(0,) limit_indices=(16,) strides=None]"(#loc3))
#loc181 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/slice[start_indices=(16,) limit_indices=(32,) strides=None]"(#loc3))
#loc182 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/threefry2x32"(#loc3))
#loc183 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/add"(#loc3))
#loc184 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/scan[reverse=False length=5 num_consts=0 num_carry=8 linear=(False, False, False, False, False, False, False, False) unroll=1]"(#loc3))
#loc185 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/while[cond_nconsts=0 body_nconsts=0]"(#loc3))
#loc186 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/while/body/slice[start_indices=(0,) limit_indices=(1,) strides=(1,)]"(#loc3))
#loc187 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/while/body/squeeze[dimensions=(0,)]"(#loc3))
#loc188 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/while/body/add"(#loc3))
#loc189 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/while/body/shift_left"(#loc3))
#loc190 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/while/body/shift_right_logical"(#loc3))
#loc191 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/while/body/or"(#loc3))
#loc192 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/while/body/xor"(#loc3))
#loc193 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/while/body/slice[start_indices=(1,) limit_indices=(2,) strides=(1,)]"(#loc3))
#loc194 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/while/body/slice[start_indices=(2,) limit_indices=(3,) strides=(1,)]"(#loc3))
#loc195 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/while/body/slice[start_indices=(3,) limit_indices=(4,) strides=(1,)]"(#loc3))
#loc196 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/while/body/convert_element_type[new_dtype=uint32 weak_type=False]"(#loc3))
#loc197 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/concatenate[dimension=0]"(#loc3))
#loc198 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/reshape[new_sizes=(8, 4) dimensions=None]"(#loc3))
#loc199 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/shift_right_logical"(#loc3))
#loc200 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/or"(#loc3))
#loc201 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/bitcast_convert_type[new_dtype=float32]"(#loc3))
#loc202 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/sub"(#loc3))
#loc203 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/mul"(#loc3))
#loc204 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/max"(#loc3))
#loc205 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/erf_inv"(#loc3))
#loc206 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/nextafter"(#loc3))
#loc207 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/pjit[in_shardings=(UnspecifiedValue, UnspecifiedValue, UnspecifiedValue) out_shardings=(UnspecifiedValue,) resource_env=None donated_invars=(False, False, False) name=clip keep_unused=False inline=False]"(#loc3))
#loc208 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/broadcast_in_dim[shape=(4,) broadcast_dimensions=()]"(#loc3))
#loc209 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/dot_general[dimension_numbers=(((1,), (0,)), ((), ())) precision=None preferred_element_type=None]"(#loc4))
#loc210 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/reshape[new_sizes=(1, 12) dimensions=None]"(#loc5))
#loc211 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/add"(#loc5))
#loc212 = loc("jit(run_mlp)/jit(main)/MLP/pjit[in_shardings=(UnspecifiedValue,) out_shardings=(UnspecifiedValue,) resource_env=None donated_invars=(False,) name=relu keep_unused=False inline=False]"(#loc6))
#loc213 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/dot_general[dimension_numbers=(((1,), (0,)), ((), ())) precision=None preferred_element_type=None]"(#loc4))
#loc214 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/reshape[new_sizes=(1, 8) dimensions=None]"(#loc5))
#loc215 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/add"(#loc5))
#loc216 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/dot_general[dimension_numbers=(((1,), (0,)), ((), ())) precision=None preferred_element_type=None]"(#loc4))
#loc217 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/reshape[new_sizes=(1, 4) dimensions=None]"(#loc5))
#loc218 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/add"(#loc5))
#loc219 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/jit(clip)/max"(#loc3))
#loc220 = loc("jit(run_mlp)/jit(main)/MLP/Dense_0/jit(clip)/min"(#loc3))
#loc221 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/jit(clip)/max"(#loc3))
#loc222 = loc("jit(run_mlp)/jit(main)/MLP/Dense_1/jit(clip)/min"(#loc3))
#loc223 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/jit(clip)/max"(#loc3))
#loc224 = loc("jit(run_mlp)/jit(main)/MLP/Dense_2/jit(clip)/min"(#loc3))
#loc225 = loc("jit(run_mlp)/jit(main)/MLP/jit(relu)/max"(#loc6))
